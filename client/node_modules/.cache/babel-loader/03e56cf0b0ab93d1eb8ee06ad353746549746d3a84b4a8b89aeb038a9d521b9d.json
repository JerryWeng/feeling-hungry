{"ast":null,"code":"var _jsxFileName = \"/Users/jerry/Developer/feeling-hungry/client/src/components/map/Map.jsx\",\n  _s = $RefreshSig$();\nimport { GoogleMap, useJsApiLoader, MarkerF } from \"@react-google-maps/api\";\nimport React, { useState, useMemo, useCallback, useRef, useEffect } from \"react\";\n\n// import { getRestaurantsData } from '../../api/getRestaurants.js'\nimport styles from \"./map.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Map() {\n  _s();\n  const [places, setPlaces] = useState();\n  const [coordinates, setCoordinates] = useState();\n  const mapStyles = styles[\"map-container\"];\n  const options = useMemo(() => ({\n    disableDefaultUI: true,\n    clickableIcons: false\n  }), []);\n  const onLoad = useCallback(function onLoad(mapInstance) {\n    const geocoder = new window.google.maps.Geocoder();\n    const service = new window.google.maps.places.PlacesService(mapInstance);\n    console.log(\"hi\");\n    // const getCurrentPositionPromise = () => {\n    //   return new Promise((resolve, reject) => {\n    //       navigator.geolocation.getCurrentPosition((successResponse) => {\n    //           resolve(successResponse);\n    //       }, (errorResponse) => {\n    //           reject(errorResponse);\n    //       });\n    //   });\n    // }   \n\n    let currentLocation;\n    // const result =getCurrentPositionPromise();\n    // const coordinate = {\"lat\" : result['coords']['latitude'], \"lng\" : result['coords']['longitude']}\n    // console.log(coordinate)\n\n    // geocoder.geocode({'location': coordinate}, function(results, status){\n    //   if (status === window.google.maps.GeocoderStatus.OK) {\n    //     if (results[1]) {\n    //       currentLocation = results[1].place_id\n    //       service.getDetails({\n    //         placeId: currentLocation\n    //       }, function (place, status) {\n    //         console.log('Place details:', place);\n    //       });\n    //     } else {\n    //       console.log('No results found')\n    //     }\n    //   } else {\n    //     console.log('Geocoder failed due to: ' + status)\n    //   }\n    // })\n  });\n\n  const {\n    isLoaded,\n    loadError\n  } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n  });\n  const RenderMap = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles[\"search\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles[\"map-container\"],\n        children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n          id: 'map',\n          zoom: 10,\n          center: coordinates,\n          mapContainerClassName: mapStyles,\n          options: options,\n          onLoad: onLoad,\n          children: /*#__PURE__*/_jsxDEV(MarkerF, {\n            position: coordinates\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  };\n  if (loadError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Map cannot be loaded.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 12\n    }, this);\n  }\n  return isLoaded ? RenderMap() : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 35\n  }, this);\n}\n_s(Map, \"Vqi3rLUNNuHrRLvooS7lufKRKww=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["GoogleMap","useJsApiLoader","MarkerF","React","useState","useMemo","useCallback","useRef","useEffect","styles","jsxDEV","_jsxDEV","Map","_s","places","setPlaces","coordinates","setCoordinates","mapStyles","options","disableDefaultUI","clickableIcons","onLoad","mapInstance","geocoder","window","google","maps","Geocoder","service","PlacesService","console","log","currentLocation","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","RenderMap","children","className","fileName","_jsxFileName","lineNumber","columnNumber","id","zoom","center","mapContainerClassName","position","_c","$RefreshReg$"],"sources":["/Users/jerry/Developer/feeling-hungry/client/src/components/map/Map.jsx"],"sourcesContent":["import { GoogleMap, useJsApiLoader, MarkerF } from \"@react-google-maps/api\";\nimport React, { useState, useMemo, useCallback, useRef, useEffect } from \"react\";\n\n// import { getRestaurantsData } from '../../api/getRestaurants.js'\nimport styles from \"./map.module.css\";\n\nexport default function Map() {\n  const [places, setPlaces] = useState();\n  const [coordinates, setCoordinates] = useState();\n\n  const mapStyles = styles[\"map-container\"];\n  const options = useMemo(() => ({\n    disableDefaultUI: true,\n    clickableIcons: false,\n  }), []);\n\n\n  const onLoad = useCallback( function onLoad (mapInstance){\n    const geocoder = new window.google.maps.Geocoder\n    const service = new window.google.maps.places.PlacesService(mapInstance)\n\n    console.log(\"hi\")\n    // const getCurrentPositionPromise = () => {\n    //   return new Promise((resolve, reject) => {\n    //       navigator.geolocation.getCurrentPosition((successResponse) => {\n    //           resolve(successResponse);\n    //       }, (errorResponse) => {\n    //           reject(errorResponse);\n    //       });\n    //   });\n    // }   \n\n    let currentLocation;\n    // const result =getCurrentPositionPromise();\n    // const coordinate = {\"lat\" : result['coords']['latitude'], \"lng\" : result['coords']['longitude']}\n    // console.log(coordinate)\n    \n    // geocoder.geocode({'location': coordinate}, function(results, status){\n    //   if (status === window.google.maps.GeocoderStatus.OK) {\n    //     if (results[1]) {\n    //       currentLocation = results[1].place_id\n    //       service.getDetails({\n    //         placeId: currentLocation\n    //       }, function (place, status) {\n    //         console.log('Place details:', place);\n    //       });\n    //     } else {\n    //       console.log('No results found')\n    //     }\n    //   } else {\n    //     console.log('Geocoder failed due to: ' + status)\n    //   }\n    // })\n  });\n\n  const {isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n  })\n  \n  const RenderMap = () => {\n    return (\n      <div>\n        <div className={styles[\"search\"]}>\n        </div>\n        <div className={styles[\"map-container\"]}>\n          <GoogleMap\n            id={'map'}\n            zoom={10}\n            center={coordinates}\n            mapContainerClassName={mapStyles}\n            options={options}\n            onLoad={onLoad}\n          >\n            <MarkerF position={coordinates}></MarkerF>\n          </GoogleMap>\n        </div>\n      </div>\n    );\n  }\n  if (loadError) {\n    return <div>Map cannot be loaded.</div>\n  }\n  return isLoaded ? RenderMap() : <div></div>\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}